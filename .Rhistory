api_key = "AIzaSyBG65bqbSYkHBe25jbQ08jHZMzOtfa4fys"
# Seleccionar google_api.R en su sistema de archivos
source(file.choose())
install.packages("jsonlite")
install.packages("jsonlite")
source(file.choose())
origen = c("Via Paolo Emilio", "Vancouver BC", "Seattle")
destino =c("Piazzale Aldo Moro", "San Francisco", "Victoria BC")
# Colocar su API Key
api_key = "AIzaSyBG65bqbSYkHBe25jbQ08jHZMzOtfa4fys"
api_url = get_url(origen, destino, api_key)
datos = get_data(api_url)
view(datos)
source(file.choose())
origen = c("Via Paolo Emilio", "Vancouver BC", "Seattle")
destino =c("Piazzale Aldo Moro", "San Francisco", "Victoria BC")
# Colocar su API Key
api_key = "AIzaSyBG65bqbSYkHBe25jbQ08jHZMzOtfa4fys"
api_url = get_url(origen, destino, api_key)
datos = get_data(api_url)
datos = get_data(api_url)
?jsonlite
datos
datos$destination_addresses
datos$destination_addresses
datos = get_data(api_url)
datos$destination_addresses
clear
datos$destination_addresses
source(file.choose())
origen = c("Via Paolo Emilio", "Vancouver BC", "Seattle")
destino =c("Piazzale Aldo Moro", "San Francisco", "Victoria BC")
api_key = "AIzaSyBG65bqbSYkHBe25jbQ08jHZMzOtfa4fys"
api_url = get_url(origen, destino, api_key)
datos = get_data(api_url)
datos$destination_addresses
??jsonlite
datos$rows
datos$rows$distance
datos$rows$elements
datos$rows$elements$duration
datos$rows$elements
datos$rows$elements$duration.text
datos$rows$elements$duration.text
datos$rows$elements$duration
datos$rows$elements[1]
datos$rows$elements[1]$duration.text[1]
datos$rows$elements[1]$duration.text
datos$rows$elements[1]
datos$rows$elements[1]$[1]
datos$rows$elements[1]
datos$rows$elements[[1]]
datos$rows$elements[[1]]
datos$rows$elements[[1]]$duration
datos$rows$elements[[1]]$duration[1]
datos$rows$elements[[1]]$duration[[1]]
datos$rows$elements[[1]]$duration$text
datos$rows$elements[[1]]$duration$text[1]
datos$rows$elements[[1]]$duration$text
max(datos$rows$elements[[1]]$duration$text)
min(datos$rows$elements[[1]]$duration$text)
which.min(datos$rows$elements[[1]]$duration$text)
which.min(datos$rows$elements[[1]]$duration$text)
which.min(na.omit(datos$rows$elements[[1]]$duration$text))
max(datos$rows$elements[[1]]$duration$text)
max(datos$rows$elements[[1]]$duration$text, na.rm = TRUE)
max(datos$rows$elements[[2]]$duration$text, na.rm = TRUE)
max(datos$rows$elements[[3]]$duration$text, na.rm = TRUE)
min(datos$rows$elements[[3]]$duration$text, na.rm = TRUE)
min(datos$rows$elements[[2]]$duration$text, na.rm = TRUE)
min(datos$rows$elements[[1]]$duration$text, na.rm = TRUE)
?memory
??memory
memory.size()
memory.limit()
memory.size(max=TRUE)
memory.limit()
install.packages("ulimit")
devtools::install_github("krlmlr/ulimit")
install.packages("devtools")
library(devtools)
library(devtools)
devtools::install_github("krlmlr/ulimit")
ulimit::memory_limit()
ulimit::memory_limit(size=NA)
setwd("~/Develop/AprendizajeNoSupervisado")
a <- read.csv("a.csv")
plot(a)
a <- as.data.frame(a)
View(a)
a <- read.csv("a.csv", header = FALSE)
a <- as.data.frame(a)
plot(x = a)
plot(x = a$V1, y = a$V2)
a_big <- read.csv("a_big.csv", header = FALSE)
a_big <- as.data.frame(a_big)
plot(x = a_big$V1, y = a_big$V2)
jambu <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
jambu(a)
guess <- read.csv("guess.csv", header = FALSE)
guess <- as.data.frame(guess)
jambu(guess)
plot(guess)
plot(guess)
h <- read.csv("h.csv", header = FALSE)
h <- as.data.frame(h)
plot(h)
install.packages("plot3D")
library(plot3D)
scatter3D(x = h$V1)
scatter3D(x = h$V1, y = h$V2, z = h$V3)
points3D(x = h$V1, y = h$V2, z = h$V3)
install.packages("scatterplot3D")
install.packages("scatterplot3d")
?scatterplot3d
??scatterplot3d
library(scatterplot3d)
points3d(h)
points3D(h)
scatterplot3d(x = h$V1, y = h$V2, z = h$V3)
scatterplot3d(x = h$V1, y = h$V2, z = h$V3, box = TRUE)
scatterplot3d(x = h$V1, y = h$V2, z = h$V3, box = FALSE)
points3D(x = h$V1, y = h$V2, z = h$V3)
scatter3D(x = h$V1, y = h$V2, z = h$V3)
scatter3D(x = h$V1, y = h$V2, z = h$V3)
guess.kmeans <- kmeans(guess)
guess.kmeans <- kmeans(guess, centers = 3)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 3)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 3)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 3)
plot(guess, col = guess.kmeans$cluster)
jambu(guess)
guess.kmeans <- kmeans(guess, centers = 4)
plot(guess, col = guess.kmeans$cluster)
plot(guess, col = guess.kmeans$cluster)
plot(guess, col = guess.kmeans$cluster)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 4)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 4)
plot(guess, col = guess.kmeans$cluster)
guess.kmeans <- kmeans(guess, centers = 4)
guess <- read.csv("guess.csv", header = FALSE)
guess <- as.data.frame(guess)
#Como se observa en la grafica la mejor opcion es talfi
plot(guess)
jambu(guess)
guess.kmeans <- kmeans(guess, centers = 4)
plot(guess, col = guess.kmeans$cluster)
moon <- read.csv("moon.csv", header = FALSE)
moon <- as.data.frame(moon)
plot(moon)
plot3D(moon)
scatter3D(moon)
scatter3D(moon$V1, moon$V2, moon$V3)
scatter3D(moon$V1, moon$V3, moon$V2)
scatter3D(moon$V2, moon$V1, moon$V3)
1
scatter3D(moon$V1, moon$V3, moon$V2)
gl <- read.csv("good_luck.csv", header = FALSE)
gl <- as.data.frame(gl)
plot(gl)
